{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation creating the streaming server in Region: creating a VPC with Public and Private subnet, launching a c5.2xlarge instance, and installing ffmpeg and docker. Deploying a AWS S2S VPN",
  "Parameters": {
      "InstanceType": {
          "Description": "Streaming Server EC2 instance type",
          "Type": "String",
          "Default": "c5.2xlarge",
          "ConstraintDescription": "must be a valid EC2 instance type."
      },
      "LatestAmiId": {
          "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
          "Default": "/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
      },
      "VPNIPLocalZone": {
          "Description": "The Public IP address of the VPN instances deployed in AWS Local Zone (a.b.c.d)",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x"
      },
      "ObjectDetectorPrivateIP": {
          "Description": "The Private IP address of the EC2 instances running the object detector application",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x"
      }
  },
  "Resources": {
      "VPC": {
          "Type": "AWS::EC2::VPC",
          "Metadata": {
              "cfn_nag": {
                  "rules_to_suppress": [
                      {
                          "id": "W60",
                          "reason": "VPC flowlog will add extra cost to this lab."
                      }
                  ]
              }
          },
          "Properties": {
              "CidrBlock": "172.16.0.0/24",
              "EnableDnsHostnames": "true",
              "EnableDnsSupport": "true",
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": "On-Premises-Simulation"
                  }
              ]
          }
      },
      "PrivateSubnet": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "CidrBlock": "172.16.0.0/25",
              "AvailabilityZone": "us-east-1a",
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": "On-Premises-Private-subnet"
                  }
              ]
          }
      },
      "PublicSubnet": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "CidrBlock": "172.16.0.128/25",
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": "On-Premises-Public-subnet"
                  }
              ]
          }
      },
      "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": "On-Premises-Public-Route"
                  }
              ]
          }
      },
      "PublicSubnetRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "PublicSubnet"
              },
              "RouteTableId": {
                  "Ref": "PublicRouteTable"
              }
          }
      },
      "PrivateRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": "On-Premises-Private-Route"
                  }
              ]
          }
      },
      "PrivateSubnetRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "PrivateSubnet"
              },
              "RouteTableId": {
                  "Ref": "PrivateRouteTable"
              }
          }
      },
      "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
              "Tags": [
                  {
                      "Key": "Application",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  },
                  {
                      "Key": "Name",
                      "Value": {
                          "Ref": "AWS::StackId"
                      }
                  }
              ]
          }
      },
      "AttachGateway": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "InternetGatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "RouteIGW": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "AttachGateway",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "NATGateway": {
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
              "AllocationId": {
                  "Fn::GetAtt": [
                      "NATGatewayEIP",
                      "AllocationId"
                  ]
              },
              "SubnetId": {
                  "Ref": "PublicSubnet"
              }
          }
      },
      "NATGatewayEIP": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
              "Domain": "vpc"
          }
      },
      "RouteNATGateway": {
          "DependsOn": [
              "NATGateway"
          ],
          "Type": "AWS::EC2::Route",
          "Properties": {
              "RouteTableId": {
                  "Ref": "PrivateRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                  "Ref": "NATGateway"
              }
          }
      },
      "OnPremiseVPNGateway": {
          "Type": "AWS::EC2::VPNGateway",
          "Properties": {
              "Type": "ipsec.1",
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "OnPremise-vpn-simulation"
                  }
              ]
          }
      },
      "VPNAttachGateway": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "VpnGatewayId": {
                  "Ref": "OnPremiseVPNGateway"
              }
          }
      },
      "LocalZoneGateway": {
          "Type": "AWS::EC2::CustomerGateway",
          "Properties": {
              "Type": "ipsec.1",
              "BgpAsn": "65000",
              "IpAddress": {
                  "Ref": "VPNIPLocalZone"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "LocalZone-vpn-publicIP-cgw"
                  }
              ]
          }
      },
      "OnPremiseLocalZoneVPNConnection": {
          "Type": "AWS::EC2::VPNConnection",
          "DependsOn": "VPNAttachGateway",
          "Properties": {
              "Type": "ipsec.1",
              "StaticRoutesOnly": "true",
              "CustomerGatewayId": {
                  "Ref": "LocalZoneGateway"
              },
              "VpnGatewayId": {
                  "Ref": "OnPremiseVPNGateway"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "vpn-OnPremise-LocalZone"
                  }
              ]
          }
      },
      "OnPremiseLocalZoneVPNRoute": {
          "Type": "AWS::EC2::VPNConnectionRoute",
          "Properties": {
              "DestinationCidrBlock": "10.0.0.0/24",
              "VpnConnectionId": {
                  "Ref": "OnPremiseLocalZoneVPNConnection"
              }
          }
      },
      "OnPremiseLocalZoneVPNRoutePropagation": {
          "Type": "AWS::EC2::VPNGatewayRoutePropagation",
          "DependsOn": [
              "VPNAttachGateway",
              "OnPremiseLocalZoneVPNConnection"
          ],
          "Properties": {
              "RouteTableIds": [
                  {
                      "Ref": "PrivateRouteTable"
                  }
              ],
              "VpnGatewayId": {
                  "Ref": "OnPremiseVPNGateway"
              }
          }
      },
      "videoStreamerEC2Instance": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "videoStreamer"
                  }
              ],
              "InstanceType": {
                  "Ref": "InstanceType"
              },
              "ImageId": {
                  "Ref": "LatestAmiId"
              },
              "SecurityGroupIds": [
                  {
                      "Fn::GetAtt": [
                          "videoStreamerInstanceSecurityGroup",
                          "GroupId"
                      ]
                  }
              ],
              "SubnetId": {
                  "Ref": "PrivateSubnet"
              },
              "IamInstanceProfile": {
                  "Ref": "videoStreamerInstanceProfile"
              },
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Join": [
                          "",
                          [
                              "#!/bin/bash\n",
                              "apt-get update\n",
                              "apt-get install ca-certificates curl gnupg\n",
                              "install -m 0755 -d /etc/apt/keyrings\n",
                              "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n",
                              "chmod a+r /etc/apt/keyrings/docker.gpg\n",
                              "echo \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list\n",
                              "apt-get update\n",
                              "apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y\n",
                              "usermod -a -G docker ubuntu\n",
                              "apt install ffmpeg -y\n"
                          ]
                      ]
                  }
              }
          }
      },
      "videoStreamerInstanceSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Metadata": {
              "cfn_nag": {
                  "rules_to_suppress": [
                      {
                          "id": "W5",
                          "reason": "At this stage of the lab, we need access to ubuntu repository, so we need to open oubound connection on port 21, 80 and 443 to 0.0.0.0/0"
                      }
                  ]
              }
          },
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "GroupDescription": "Enable SSH access via port 22 and enable 8554 for RTSP (use only the Object detector IP)",
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "onPremise-videoStreamer-sg"
                  }
              ],
              "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "8554",
                      "ToPort": "8554",
                      "Description": "Enable RTSP from objectDectector instance Private IP",
                      "CidrIp": { "Fn::Join": ["", [{"Ref": "ObjectDetectorPrivateIP"}, "/32"]]}
                    }
              ],
              "SecurityGroupEgress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "443",
                      "ToPort": "443",
                      "Description": "egress on port 443 for linux repository",
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "80",
                      "ToPort": "80",
                      "Description": "egress on port 80 for linux repository",
                      "CidrIp": "0.0.0.0/0"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "21",
                      "ToPort": "21",
                      "Description": "egress on port 21 for linux repository",
                      "CidrIp": "0.0.0.0/0"
                  }
              ]
          }
      },
      "videoStreamerInstanceProfile": {
          "Type": "AWS::IAM::InstanceProfile",
          "Properties": {
              "InstanceProfileName": "videoStreamer-ec2-instance-profile",
              "Path": "/",
              "Roles": [
                  {
                      "Ref": "videoStreamerInstanceRole"
                  }
              ]
          }
      },
      "videoStreamerInstanceRole": {
          "Type": "AWS::IAM::Role",
          "Metadata": {
              "cfn_nag": {
                  "rules_to_suppress": [
                      {
                          "id": "W28",
                          "reason": "This is a lab part of the workshop, all ressources must be deleted by the end of the lab."
                      }
                  ]
              }
          },
          "Properties": {
              "RoleName": "videoStreamer-ec2-instance-role",
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": [
                                  "ec2.amazonaws.com"
                              ]
                          },
                          "Action": [
                              "sts:AssumeRole"
                          ]
                      }
                  ]
              },
              "Path": "/",
              "ManagedPolicyArns": [
                  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
              ]
          }
      }
  },
  "Outputs": {
      "InstanceId": {
          "Description": "InstanceId of the newly created EC2 instance",
          "Value": {
              "Ref": "videoStreamerEC2Instance"
          }
      },
      "AZ": {
          "Description": "Availability Zone of the newly created EC2 instance",
          "Value": {
              "Fn::GetAtt": [
                  "videoStreamerEC2Instance",
                  "AvailabilityZone"
              ]
          }
      },
      "PrivateIP": {
          "Description": "Private IP address of the newly created EC2 instance",
          "Value": {
              "Fn::GetAtt": [
                  "videoStreamerEC2Instance",
                  "PrivateIp"
              ]
          }
      }
  }
}